// Fichier .env
require('dotenv').config();
// date
var date = require('date');
// requete
const request = require('request');
// Discord
const Discord = require('discord.js');
// mysql
var mysql = require('mysql');
// manipulation dates
var moment = require('moment');

// Prefixe pour les commandes
const PREFIX = process.env.PREFIX;
// url api
const baseURL = process.env.API_URL;
// couleurs requetes
const PROFILE = process.env.COLOR_PROFILE;
const RANKED = process.env.COLOR_RANKED;
const QUICK = process.env.COLOR_QUICK;
const HELP = process.env.COLOR_HELP;
const ERROR = process.env.COLOR_ERROR;
const WARNING = process.env.COLOR_WARNING;

// liste des regions
const regionList = new Set(['eu', 'us', 'kr', 'cn', 'global']);

// message d'erreur API indisp
const errorAPI = new Discord.RichEmbed()
    .setTitle(":x: Erreur :x:")
    .setColor(ERROR)
    .setDescription("L'API Overwatch n'est pas disponible ...", true)
    .setThumbnail("https://cdn.iconscout.com/icon/free/png-256/page-not-found-5-530376.png");

// message d'erreur API indisp
const errorData = new Discord.RichEmbed()
    .setTitle(":x: Erreur :x:")
    .setColor(ERROR)
    .setDescription("La base de données n'est pas disponible ...", true)
    .setThumbnail("https://cdn.iconscout.com/icon/free/png-256/page-not-found-5-530376.png");

// message erreur SQL
const errorSQL = new Discord.RichEmbed()
    .setTitle(":warning: Warning :warning:")
    .setColor(WARNING)
    .setDescription("Le joueur n'a pas été trouvé dans la base de données ...", true)
    .setThumbnail("https://img.icons8.com/clouds/2x/error.png");

// message erreur 1 seul enregistrement bdd
const errorDate = new Discord.RichEmbed()
    .setTitle(":warning: Warning :warning:")
    .setColor(WARNING)
    .setDescription("Le joueur n'a effectué qu'un seul enregistrement de ses stats ...", true)
    .setThumbnail("https://img.icons8.com/clouds/2x/error.png");

// message erreur args commande
const errorArgs = new Discord.RichEmbed()
    .setTitle(":warning: Warning :warning:")
    .setColor(WARNING)
    .setDescription("Les arguments de la commande ne sont pas valides ...", true)
    .setThumbnail("https://img.icons8.com/clouds/2x/error.png");

// mysql
var pool = mysql.createPool({
    host: "localhost",
    user: "bot",
    password: "pwd",
    database: "overwatch"
});

exports.competitiveStats = {
    name: `${PREFIX}ranked`,
    execute(channel, message, bot) {
        var commandArgs = message.content.split(' ');
        var user = message.author.username;

        if (regionList.has(commandArgs[1]) && (typeof commandArgs[2] !== 'undefined')) {
            var region = commandArgs[1];
            var pseudo = commandArgs[2].replace('#', '-');
        } else {
            bot.channels.get(channel).send({ embed: errorArgs });
            return -1;
        }

        var url = baseURL + '/ranked/pc/' + region + '/' + pseudo;
        try {
            request({ url, json: true }, function (err, res, json) {
                if (err) {
                    console.log(`\[${date.getDate()}\] - Failed : accès à ${url} - Error : ${err.code}`)
                    bot.channels.get(channel).send({ embed: errorAPI });
                } else if (res.statusCode === 404 || res.statusCode === 400 || res.statusCode === 409) {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${json.name}`);
                    console.log(`\[${date.getDate()}\] - Warning : le joueur ${pseudo.replace('-', '#')} n\'a pas été trouvé ... - Error : ${res.statusCode}`);
                    // envoi du message
                    bot.channels.get(channel).send({ embed: errorPlayer(pseudo.replace('-', '#'), res.statusCode) });
                } else {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${json.name}`);
                    console.log(`\[${date.getDate()}\] - Success : le joueur ${pseudo.replace('-', '#')} a été trouvé`);
                    var name               = json.name;
                    var nbCards            = json.nbCards;
                    var nbMedals           = json.nbMedals;
                    var nbMedalsBronze     = json.nbMedalsBronze;
                    var nbMedalsSilver     = json.nbMedalsSilver;
                    var nbMedalsGold       = json.nbMedalsGold;
                    var bestDamage         = json.bestDamage;
                    var bestKills          = json.bestKills;
                    var bestEnvKills       = json.bestEnvKills;
                    var bestHeal           = json.bestHeal;
                    var bestKillsStreak    = json.bestKillsStreak;
                    var bestMultiKills     = json.bestMultiKills;
                    var bestObjectiveKills = json.bestObjectiveKills;
                    var bestObjectiveTime  = json.bestObjectiveTime;
                    var bestTimeOneFire    = json.bestTimeOneFire;
                    var timePlayed         = json.timePlayed;
                    var gamesPlayed        = json.gamesPlayed;
                    var gamesTied          = json.gamesTied;
                    var gamesLost          = json.gamesLost;
                    var gamesWon           = json.gamesWon;
                    var rating             = json.rating;
                    var ratingIcon         = json.ratingIcon;

                    const datetime = date.getDate();
                    const jour = datetime.split(' ');
                    const dateFinale = jour[1];

                    var msg = new Discord.RichEmbed()
                        .setTitle(`Stats ranked de ${name}`)
                        .setColor(RANKED)
                        .setDescription(quote())
                        .addField("Parties jouées", gamesPlayed, true)
                        .addField("Temps de jeu", timePlayed, true)
                        .addField("Cote", rating, true)
                        .addField("Victoires", gamesWon, true)
                        .addField("Égalités", gamesTied, true)
                        .addField("Perdues", gamesLost, true)
                        .addField("Meilleurs dommages", bestDamage, true)
                        .addField("Meilleures élim.", bestKills, true)
                        .addField("Meilleure série d'élim.", bestKillsStreak, true)
                        .addField("Meilleures élim. d'environnement", bestEnvKills, true)
                        .addField("Meilleure élim. multiple", bestMultiKills, true)
                        .addField("Meilleures élim. sur objectif", bestObjectiveKills, true)
                        .addField("Plus long temps sur objectif", bestObjectiveTime, true)
                        .addField("Plus long temps on fire", bestTimeOneFire, true)
                        .addField("Meilleur heal", bestHeal, true)
                        .addField("Cards", nbCards, true)
                        .addField("Médailles", nbMedals, true)
                        .addField("Gold", nbMedalsGold, true)
                        .addField("Silver", nbMedalsSilver, true)
                        .addField("Bronze", nbMedalsBronze, true)
                        .setFooter(user)
                        .setThumbnail(ratingIcon)
                    bot.channels.get(channel).send({ embed: msg });

                    pool.getConnection(function (err, con) {
                        if (err) {
                            console.log(`\[${date.getDate()}\] - Failed : connexion à la bdd - Error : ${err.code}`)
                            bot.channels.get(channel).send({ embed: errorData });
                        } else {
                            console.log(`\[${date.getDate()}\] - Success : connexion à la bdd`);

                            var sql = `INSERT INTO statsc (Pseudo, nbCards, nbMedalsTotal, nbMedalsBronze, nbMedalsSilver, nbMedalsGold, bestDamage, bestKills, bestEnvKills, bestHeal, bestKillsStreak, bestMultiKills, bestObjectiveKills, bestObjectiveTime, timeOnFire, gamesLost, gamesPlayed, gamesTied, gamesWon, timePlayed, rating, ratingIcon, date) VALUES (\'${json.name}\', \'${nbCards}\', \'${nbMedals}\', \'${nbMedalsBronze}\', \'${nbMedalsSilver}\', \'${nbMedalsGold}\', \'${bestDamage}\', \'${bestKills}\', \'${bestEnvKills}\', \'${bestHeal}\', \'${bestKillsStreak}\', \'${bestMultiKills}\', \'${bestObjectiveKills}\', \'${bestObjectiveTime}\', \'${bestTimeOneFire}\', \'${gamesLost}\', \'${gamesPlayed}\', \'${gamesTied}\', \'${gamesWon}\', \'${timePlayed}\', \'${rating}\', \'${ratingIcon}\', \'${dateFinale}\')`;
                            con.query(sql, function (err, result) {
                                con.release();
                                if (err) throw err;
                                console.log(`\[${date.getDate()}\] - Success : enregistrement ajouté`);
                            });
                        }
                    });
                }
            });
        } catch (error) {
            message.reply('problème avec le téléchargement de tes données.')
        }
    }
}

exports.quickplayStats = {
    name: `${PREFIX}quickplay`,
    execute(channel, message, bot) {
        var commandArgs = message.content.split(' ');
        var user = message.author.username;

        if (regionList.has(commandArgs[1]) && (typeof commandArgs[2] !== 'undefined')) {
            var region = commandArgs[1];
            var pseudo = commandArgs[2].replace('#', '-');
        } else {
            bot.channels.get(channel).send({ embed: errorArgs });
            return -1;
        }
        var url = baseURL + '/quickplay/pc/' + region + '/' + pseudo;
        try {
            request({ url, json: true }, function (err, res, json) {
                if (err) {
                    console.log(`\[${date.getDate()}\] - Failed : accès à ${url} - Error : ${err.code}`)
                    bot.channels.get(channel).send({ embed: errorAPI });
                } else if (res.statusCode === 404 || res.statusCode === 400) {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${json.name}`);
                    console.log(`\[${date.getDate()}\] - Warning : le joueur ${pseudo.replace('-', '#')} n\'a pas été trouvé ... - Error : ${res.statusCode}`);
                    // envoi du message
                    bot.channels.get(channel).send({ embed: errorPlayer(pseudo.replace('-', '#'), res.statusCode) });
                } else {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${json.name}`);
                    console.log(`\[${date.getDate()}\] - Success : le joueur ${pseudo.replace('-', '#')} a été trouvé`);
                    var name               = json.name;
                    var icon               = json.icon;
                    var nbCards            = json.nbCards;
                    var nbMedals           = json.nbMedals;
                    var nbMedalsBronze     = json.nbMedalsBronze;
                    var nbMedalsSilver     = json.nbMedalsSilver;
                    var nbMedalsGold       = json.nbMedalsGold;
                    var bestDamage         = json.bestDamage;
                    var bestKills          = json.bestKills;
                    var bestEnvKills       = json.bestEnvKills;
                    var bestHeal           = json.bestHeal;
                    var bestKillsStreak    = json.bestKillsStreak;
                    var bestMultiKills     = json.bestMultiKills;
                    var bestObjectiveKills = json.bestObjectiveKills;
                    var bestObjectiveTime  = json.bestObjectiveTime;
                    var bestTimeOneFire    = json.bestTimeOneFire;
                    var timePlayed         = json.timePlayed;
                    var gamesWon           = json.gamesWon;

                    const datetime = date.getDate();
                    const jour = datetime.split(' ');
                    const dateFinale = jour[1];

                    var msg = new Discord.RichEmbed()
                        .setTitle(`Stats quickplay de ${name}`)
                        .setColor(QUICK)
                        .setDescription(quote())
                        .addField("Parties gagnées", gamesWon, true)
                        .addField("Temps de jeu", timePlayed, true)
                        .addField("Meilleurs dommages", bestDamage, true)
                        .addField("Meilleures élim.", bestKills, true)
                        .addField("Meilleure série d'élim.", bestKillsStreak, true)
                        .addField("Meilleures élim. d'environnement", bestEnvKills, true)
                        .addField("Meilleure élim. multiple", bestMultiKills, true)
                        .addField("Meilleures élim. sur objectif", bestObjectiveKills, true)
                        .addField("Plus long temps sur objectif", bestObjectiveTime, true)
                        .addField("Plus long temps on fire", bestTimeOneFire, true)
                        .addField("Meilleur soins", bestHeal, true)
                        .addField("Cards", nbCards, true)
                        .addField("Médailles", nbMedals, true)
                        .addField("Gold", nbMedalsGold, true)
                        .addField("Silver", nbMedalsSilver, true)
                        .addField("Bronze", nbMedalsBronze, true)
                        .setFooter(user)
                        .setThumbnail(icon)
                    bot.channels.get(channel).send({ embed: msg });

                    pool.getConnection(function (err, con) {
                        if (err) {
                            console.log(`\[${date.getDate()}\] - Failed : connexion à la bdd - Error : ${err.code}`)
                            bot.channels.get(channel).send({ embed: errorData });
                        } else {
                            console.log(`\[${date.getDate()}\] - Success : connexion à la bdd`);

                            var sql = `INSERT INTO statsn (Pseudo, nbCards, nbMedalsTotal, nbMedalsBronze, nbMedalsSilver, nbMedalsGold, bestDamage, bestKills, bestEnvKills, bestHeal, bestKillsStreak, bestMultiKills, bestObjectiveKills, bestObjectiveTime, timeOnFire, gamesWon, timePlayed, date) VALUES (\'${json.name}\', \'${nbCards}\', \'${nbMedals}\', \'${nbMedalsBronze}\', \'${nbMedalsSilver}\', \'${nbMedalsGold}\', \'${bestDamage}\', \'${bestKills}\', \'${bestEnvKills}\', \'${bestHeal}\', \'${bestKillsStreak}\', \'${bestMultiKills}\', \'${bestObjectiveKills}\', \'${bestObjectiveTime}\', \'${bestTimeOneFire}\', \'${gamesWon}\', \'${timePlayed}\', \'${dateFinale}\')`;
                            con.query(sql, function (err, result) {
                                con.release();
                                if (err) throw err;
                                console.log(`\[${date.getDate()}\] - Success : enregistrement ajouté`);
                            });
                        }
                    });
                }
            });
        } catch (error) {
            message.reply('problème avec le téléchargement de tes données.')
        }
    }
}

exports.profile = {
    name: `${PREFIX}profile`,
    execute(channel, message, bot) {
        var commandArgs = message.content.split(' ');
        var user = message.author.username;

        if (regionList.has(commandArgs[1]) && (typeof commandArgs[2] !== 'undefined')) {
            var region = commandArgs[1];
            var pseudo = commandArgs[2].replace('#', '-');
        } else {
            bot.channels.get(channel).send({ embed: errorArgs });
            return -1;
        }

        var url = baseURL + '/profile/pc/' + region + '/' + pseudo;

        try {
            request({ url, json: true }, function (err, res, json) {
                if (err) {
                    console.log(`\[${date.getDate()}\] - Failed : accès à ${url} - Error : ${err.code}`)
                    bot.channels.get(channel).send({ embed: errorAPI });
                } else if (res.statusCode === 404 || res.statusCode === 400) {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${pseudo.replace('-', '#')}`);
                    console.log(`\[${date.getDate()}\] - Warning : le joueur ${pseudo} n\'a pas été trouvé ... - Error : ${res.statusCode}`);
                    // envoi du message
                    bot.channels.get(channel).send({ embed: errorPlayer(pseudo.replace('-', '#'), res.statusCode) });
                } else if (res.statusCode === 200) {
                    console.log(`\[${date.getDate()}\] - Info : ${user} a recherché le profil de ${json.name}`);
                    console.log(`\[${date.getDate()}\] - Success : le joueur ${pseudo.replace('-', '#')} a été trouvé`);

                    var wins      = json.gamesWon;
                    var niveau    = json.level;
                    var quickplay = json.quickplay;
                    var ranked    = json.ranked;

                    const datetime = date.getDate();
                    const jour = datetime.split(' ');
                    const dateFinale = jour[1];

                    // creation du message
                    var msg = new Discord.RichEmbed()
                        .setTitle(`Profil de ${json.name}`)
                        .setColor(PROFILE)
                        .setDescription(quote())
                        .addField('Niveau ', niveau, true)
                        .addField("Parties gagnées", wins, true)
                        .addBlankField()
                        .addField("Temps de jeu en parties rapides", quickplay, true)
                        .addField("Temps de jeu en parties classées", ranked, true)
                        .setFooter(user)
                        .setThumbnail(`${json.icon}`)

                    // envoi du message
                    bot.channels.get(channel).send({ embed: msg });

                    pool.getConnection(function (err, con) {
                        if (err) {
                            console.log(`\[${date.getDate()}\] - Failed : connexion à la bdd - Error : ${err.code}`)
                            bot.channels.get(channel).send({ embed: errorData });
                        } else {
                            console.log(`\[${date.getDate()}\] - Success : connexion à la bdd`);

                            var sql = `INSERT INTO profil (Pseudo, Icon, Niveau, GamesWon, TimeQuickPlayed, TimeRankedPlayed, date) VALUES (\'${json.name}\', \'${json.icon}\', \'${niveau}\', \'${wins}\', \'${quickplay}\', \'${ranked}\', \'${dateFinale}\')`;
                            con.query(sql, function (err, result) {
                                con.release();
                                if (err) throw err;
                                console.log(`\[${date.getDate()}\] - Success : enregistrement ajouté`);
                            });
                        }
                    });
                }
            });
        } catch (error) {
            message.reply('problème avec le téléchargement de tes données.')
        }
    }
}

//TODO Affichage temps obj en mm:ss au lieu de hh:mm:ss car décalage
exports.stats = {
    name: `${PREFIX}stats`,
    execute(channel, message, bot) {
        var commandArgs = message.content.split(' ');
        var user = message.author.username;

        if (typeof commandArgs[1] !== 'undefined') {
            let pseudo = commandArgs[1];
            // requete SQL
            pool.getConnection(function (err, con) {
                if (err) {
                    console.log(`\[${date.getDate()}\] - Failed : connexion à la bdd - Error : ${err.code}`)
                    bot.channels.get(channel).send({ embed: errorData });
                } else {
                    console.log(`\[${date.getDate()}\] - Success : connexion à la bdd`);
                    var sql = `SELECT DISTINCT(date), Pseudo, nbCards, nbMedalsTotal, nbMedalsBronze, nbMedalsSilver, nbMedalsGold, bestDamage, bestKills, bestEnvKills, bestHeal, bestKillsStreak, bestMultiKills, bestObjectiveKills, bestObjectiveTime, timeOnFire, gamesLost, gamesPlayed, gamesTied, gamesWon, timePlayed, rating FROM statsc WHERE Pseudo = \'${pseudo}\' ORDER BY date DESC LIMIT 2`;

                    con.query(sql, function (err, result) {
                        if (err) throw err;
                        con.release();

                        // aucun résultat SQL
                        if (result.length === 0) {
                            console.log(`\[${date.getDate()}\] - Warning : ${pseudo} non présent dans la bdd`);
                            bot.channels.get(channel).send({ embed: errorSQL});
                        } else if (result.length === 1) { // 1 seul enregistrement dans la bdd
                            console.log(`\[${date.getDate()}\] - Warning : ${pseudo} pas assez de stats`);
                            bot.channels.get(channel).send({ embed: errorDate});
                        } else if (result.length === 2) { // 2 enregistrements dans la bdd
                            console.log(`\[${date.getDate()}\] - Success : affichage de l'évolution des stats`);
                            var msg = new Discord.RichEmbed()
                                .setTitle(`Stats ranked de ${result[0].Pseudo}\n`)
                                .setColor(RANKED)
                                .setDescription(diffDate(result[1].date, result[0].date))
                                .addField("Parties jouées", diff(result[1].gamesPlayed, result[0].gamesPlayed), true)
                                .addField("Temps de jeu", diffTime(result[1].timePlayed, result[0].timePlayed), true)
                                .addField("Cote", diff(result[1].rating, result[0].rating), true)
                                .addField("Victoires", diff(result[1].gamesWon, result[0].gamesWon), true)
                                .addField("Égalités", diff(result[1].gamesTied, result[0].gamesTied), true)
                                .addField("Perdues", diff(result[1].gamesLost, result[0].gamesLost), true)
                                .addField("Meilleurs dommages", diff(result[1].bestDamage, result[0].bestDamage), true)
                                .addField("Meilleures élim.", diff(result[1].bestKills, result[0].bestKills), true)
                                .addField("Meilleure série d'élim.", diff(result[1].bestKillsStreak, result[0].bestKillsStreak), true)
                                .addField("Meilleures élim. d'environnement", diff(result[1].bestEnvKills, result[0].bestEnvKills), true)
                                .addField("Meilleure élim. multiple", diff(result[1].bestMultiKills, result[0].bestMultiKills), true)
                                .addField("Meilleurs élim. sur objectif", diff(result[1].bestObjectiveKills, result[0].bestObjectiveKills), true)
                                .addField("Plus long temps sur objectif", diffTime(result[1].bestObjectiveTime, result[0].bestObjectiveTime), true)
                                .addField("Plus long temps on fire", diffTime(result[1].timeOnFire, result[0].timeOnFire), true)
                                .addField("Meilleur heal", diff(result[1].bestHeal, result[0].bestHeal), true)
                                .addField("Cards", diff(result[1].nbCards, result[0].nbCards), true)
                                .addField("Médailles", diff(result[1].nbMedalsTotal, result[0].nbMedalsTotal), true)
                                .addField("Gold", diff(result[1].nbMedalsGold, result[0].nbMedalsGold), true)
                                .addField("Silver", diff(result[1].nbMedalsSilver, result[0].nbMedalsSilver), true)
                                .addField("Bronze", diff(result[1].nbMedalsBronze, result[0].nbMedalsBronze), true)
                                .setFooter(user)
                                .setThumbnail("https://img.icons8.com/clouds/500/combo-chart.png");
                            bot.channels.get(channel).send({ embed: msg });
                        }
                    });
                }
            });

        } else {
            bot.channels.get(channel).send({ embed: errorArgs });
        }

    }
}

exports.help = {
    name: `${PREFIX}help`,
    execute(channel, message, bot) {
        var msg = new Discord.RichEmbed()
            .setTitle('Aide du bot Overwatch :sos:')
            .setColor(HELP)
            .setDescription("\*Besoin d'assistance ?\*")
            .addField("\`$help\`", "Affiche cette aide")
            .addField("\`$profile region[eu, us, kr, cn, global] battletag\`", "Consulter son profil")
            .addField("\`$ranked region[eu, us, kr, cn, global] battletag\`", "Consulter ses stats compétitives")
            .addField("\`$quickplay region[eu, us, kr, cn, global] battletag\`", "Consulter ses stats parties rapides")
            .addField("\`$stats battletag\`", "Consulter l'évolution de ses stats")
            .setFooter(message.author.username)
            .setThumbnail("https://img.icons8.com/clouds/2x/help.png")
        bot.channels.get(channel).send({ embed: msg });
        //message.reply("bienvenue dans l\'aide du bot Overwatch.\n\nVoici les commandes possibles:\n\n\`$help\`\t->\taffiche cette aide\n\`$profile platform\`*options: (pc/xbl/psn)* \`region\` *options: (eu/us/cn/kr/global)* \`pseudo\` te permet d'afficher les stats de ton profil OW\n");
    }
}

function quote() {
    const quotes = [
        "\*a.k.a The French Monster\*",
        "\*a.k.a La Légende\*",
        "\*Say my name\*",
        "\*Requiescat In Pace\*",
        "\*It's over 9000\*",
        "\*Vers l'infini et au-delà\*",
        "\*Ça troue l'cul\*",
        "\*Hmmm - Geralt of Rivia\*",
        "\*Checkez-moé çé, la rafale !\*",
        "\*Quelle indignité ...\*",
        "\*Arrête de carry, tu vas avoir mal aux dents !\*",
        "\*T'as essayé en allumant l'écran ?\*",
        "\*C'était sûr en fait, c'était sûûûr !\*"
    ];
    return quotes[Math.floor(Math.random() * quotes.length)];
}

function errorPlayer(joueur, error) {
    let description;
    if (error === 400) {
        description = `Le joueur ${joueur} n\'a pas été trouvé, vérifie son tag`;
    } else if (error === 404) {
        description = `Le joueur ${joueur} n\'a pas été trouvé, vérifie son pseudo`;
    } else if (error === 409) {
        description = `Le joueur ${joueur} n'a jamais joué en classé ...`;
    }

    // message d'erreur joueur
    const errorMsg = new Discord.RichEmbed()
        .setTitle(":x: Erreur :x:")
        .setColor(ERROR)
        .setDescription(description, true)
        .setThumbnail("https://img.icons8.com/clouds/2x/error.png");

    return errorMsg;
}

function diff(precedent, actuel) {
    if ((actuel - precedent) < 0){
        return precedent + " -> " + actuel + "\n*(" + (actuel - precedent) + ")*";
    }
    return precedent + " -> " + actuel + "\n*(+ " + (actuel - precedent) + ")*";
}

function diffTime(precedent, actuel){
    actuel = actuel.split(":");
    precedent = precedent.split(":");
    let secondesAct = Number(actuel[0]) * 3600 + Number(actuel[1]) * 60 + Number(actuel[2]);
    let secondesPrec = Number(precedent[0]) * 3600 + Number(precedent[1]) * 60 + Number(precedent[2]);
    let difference = secondesAct - secondesPrec;
    let heures = Math.floor(difference / 3600);
    difference -= heures * 3600;
    let minutes = Math.floor(difference / 60);
    difference -= (minutes * 60);
    heures = (heures > 9) ? heures : "0" + heures;
    minutes = (minutes > 9) ? minutes : "0" + minutes;
    difference = (difference > 9) ? difference : "0" + difference;

    return "+ "+ heures + ":" + minutes + ":" + difference;
}


function diffDate(precedent, actuel){
    var date1 = moment(precedent, "DD/MM/YYYY").toDate();
    var date2 = moment(actuel, "DD/MM/YYYY").toDate();

    const diffTime = Math.abs(date2 - date1);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return precedent + " -> " + actuel + "\n*(+ " + diffDays + ")*";
}
